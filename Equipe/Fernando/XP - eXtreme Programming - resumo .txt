local: mysql9.000webhost.com
db:    a6233819_000web
user:  a6233819_000web
senha: 000webhost

**XP - Wiki**

**1 - Valores**
1.1 - Comunicação
1.2 - Simplicidade
1.3 - Feedback
1.4 - Coragem
1.5 - Respeito

**2 - Princípios básicos**
2.1 - Feedback rápido
2.2 - Presumir simplicidade
2.3 - Mudanças incrementais
2.4 - Abraçar mudanças
2.5 - Trabalho de alta qualidade.

O XP prefere uma abordagem orientada a objetos como paradigma de desenvolvimento e envolve 4 atividades metodológicas:
  **I** Planejamento
 **II** Projeto ("Designing")
**III** Codificação
 **IV** Testes

**Jogo de Planejamento (Planning Game):** Iterações semanais.
No início da semana, desenvolvedores e cliente reúnem-se para priorizar as funcionalidades. 
O cliente identifica prioridades e os desenvolvedores as estimam.
Ao final de cada semana, o cliente recebe novas funcionalidades, completamente testadas e prontas para serem postas em produção

**Fases pequenas (Small Releases):** Liberação de subversões.
Liberações de pequenas versões funcionais do projeto para o cliente, que já pode testar uma parte do sistema.

**Metáfora (Metaphor):** Entendendo a realidade dele.
É preciso traduzir as palavras do cliente para o significado que ele espera dentro do projeto.

**Design Simples (Simple Design):** Simplicidade é um princípio da XP.
Projeto simples apenas o usuário "teste" senha "123" e assim ter acesso a todo o sistema.
Fazer o código exato para que esta funcionalidade seja implementada, sem se preocupar com sistemas de autenticação e restrições de acesso.
Inicialmente código fácil deve ser identificado e substituído por código simples.

**Testes de Aceitação (Customer Tests):** Mini teste em tempo real.
São testes construídos pelo cliente e conjunto de analistas e testadores, para aceitar um determinado requisito do sistema.

**Reuniões em pé (Stand-up Meeting):** Rápidas reuniões.
Reuniões em pé para não se perder o foco nos assuntos, produzindo reuniões rápidas, apenas abordando tarefas realizadas e tarefas a realizar pela equipe.

**Propriedade Coletiva (Collective Ownership):** Conhecimento geral de toda equipe.
O código fonte não tem dono e ninguém precisa solicitar permissão para poder modificar o mesmo. O objetivo com isto é fazer a equipe conhecer todas as partes do sistema.

**Programação Pareada (Pair Programming):** é a programação em par/dupla num único computador.
Geralmente a dupla é formada por um iniciante na linguagem e outra pessoa funcionando como um instrutor.
Como é apenas um computador, o novato é que fica à frente fazendo a codificação, e o instrutor acompanha ajudando a desenvolver suas habilidades.

**Padronização do Codigo (Coding Standards):** Estabelecer regras para programar e todos devem seguir estas regras. 
Parecer que  código fonte foi editado pela mesma pessoa.

**Desenvolvimento Orientado a Testes (Test Driven Development):** Primeiro crie os testes unitários (unit tests) e depois crie o código para que os testes funcionem.
Esta abordagem é complexa no início, pois vai contra o processo de desenvolvimento de muitos anos.
Só que os testes unitários são essenciais para que a qualidade do projeto seja mantida. [interessante. Mas dificilmente vamos abordar esta tecnica]

**Refatoração (Refactoring):** Evitando a duplicação de código-fonte, clareza (leitura) do código.
É um processo que permite a melhoria continua da programação, mantendo a compatibilidade com o código já existente.

**Integração Contínua (Continuous Integration):** Sempre que produzir uma nova funcionalidade, nunca esperar uma semana para integrar à versão atual do sistema.
Isto só aumenta a possibilidade de conflitos e a possibilidade de erros no código fonte. Integrar de forma contínua permite saber o status real da programação.

